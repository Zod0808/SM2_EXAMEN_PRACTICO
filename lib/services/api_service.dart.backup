import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/alumno_model.dart';
import '../models/usuario_model.dart';
import '../models/asistencia_model.dart';
import '../models/facultad_escuela_model.dart';
import '../models/punto_control_model.dart';
import '../models/visita_externo_model.dart';
import '../config/api_config.dart';

class ApiService {rt:convert';
import 'package:http/http.dart' as http;
import '../models/alumno_model.dart';
import '../models/usuario_model.dart';
import '../models/asistencia_model.dart';
import '../models/facultad_escuela_model.dart';
impo  // ==================== PUNTOS DE CONTROL ====================

  Future<List<PuntoControlModel>> getPuntosControl() async {
    try {
      final response = await http.get(
        Uri.parse('${ApiConfig.baseUrl}/puntos-control'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => PuntoControlModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener puntos de control: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<PuntoControlModel> createPuntoControl(PuntoControlModel punto) async {
    try {
      final response = await http.post(
        Uri.parse('${ApiConfig.baseUrl}/puntos-control'),
        headers: _headers,
        body: json.encode(punto.toJson()),
      );

      if (response.statusCode == 201) {
        return PuntoControlModel.fromJson(json.decode(response.body));
      } else {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al crear punto de control');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<void> asignarGuardiaAPunto(String puntoId, String guardiaId) async {
    try {
      final response = await http.put(
        Uri.parse('${ApiConfig.baseUrl}/puntos-control/$puntoId/asignar'),
        headers: _headers,
        body: json.encode({'guardia_id': guardiaId}),
      );

      if (response.statusCode != 200) {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al asignar guardia');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<void> desasignarGuardiaDePunto(String puntoId, String guardiaId) async {
    try {
      final response = await http.put(
        Uri.parse('${ApiConfig.baseUrl}/puntos-control/$puntoId/desasignar'),
        headers: _headers,
        body: json.encode({'guardia_id': guardiaId}),
      );

      if (response.statusCode != 200) {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al desasignar guardia');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  // ==================== VISITAS EXTERNAS ====================t '../models/punto_control_model.dart';
import '../models/visita_externo_model.dart';
import '../config/api_config.dart';

class ApiService {
  static final ApiService _instance = ApiService._internal();
  factory ApiService() => _instance;
  ApiService._internal();

  // Headers por defecto
  Map<String, String> get _headers => {'Content-Type': 'application/json'};

  // ==================== ALUMNOS ====================

  Future<List<AlumnoModel>> getAlumnos() async {
    try {
      final response = await http.get(
        Uri.parse(ApiConfig.alumnosUrl),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => AlumnoModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener alumnos: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<AlumnoModel> getAlumnoByCodigo(String codigo) async {
    try {
      final response = await http.get(
        Uri.parse('${ApiConfig.alumnosUrl}/$codigo'),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        return AlumnoModel.fromJson(json.decode(response.body));
      } else if (response.statusCode == 404) {
        throw Exception('Alumno no encontrado');
      } else if (response.statusCode == 403) {
        final data = json.decode(response.body);
        throw Exception(data['error'] ?? 'Alumno inactivo');
      } else {
        throw Exception('Error al buscar alumno: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  // ==================== USUARIOS ====================

  Future<UsuarioModel> login(String email, String password) async {
    try {
      final response = await http.post(
        Uri.parse(ApiConfig.loginUrl),
        headers: _headers,
        body: json.encode({'email': email, 'password': password}),
      );

      if (response.statusCode == 200) {
        return UsuarioModel.fromJson(json.decode(response.body));
      } else if (response.statusCode == 401) {
        throw Exception('Credenciales incorrectas');
      } else {
        throw Exception('Error en el servidor');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<List<UsuarioModel>> getUsuarios() async {
    try {
      final response = await http.get(
        Uri.parse(ApiConfig.usuariosUrl),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => UsuarioModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener usuarios: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<UsuarioModel> createUsuario(UsuarioModel usuario) async {
    try {
      final response = await http.post(
        Uri.parse(ApiConfig.usuariosUrl),
        headers: _headers,
        body: json.encode(usuario.toJson()),
      );

      if (response.statusCode == 201) {
        return UsuarioModel.fromJson(json.decode(response.body));
      } else {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al crear usuario');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<void> changePassword(String userId, String newPassword) async {
    try {
      final response = await http.put(
        Uri.parse('${ApiConfig.usuariosUrl}/$userId/password'),
        headers: _headers,
        body: json.encode({'password': newPassword}),
      );

      if (response.statusCode != 200) {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al cambiar contraseña');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  // Actualizar estado de usuario (activar/desactivar)
  Future<void> updateUserStatus(String userId, String newStatus) async {
    try {
      final response = await http.put(
        Uri.parse('${ApiConfig.usuariosUrl}/$userId'),
        headers: _headers,
        body: json.encode({'estado': newStatus}),
      );

      if (response.statusCode != 200) {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al actualizar estado');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  // ==================== ASISTENCIAS ====================

  Future<List<AsistenciaModel>> getAsistencias() async {
    try {
      final response = await http.get(
        Uri.parse(ApiConfig.asistenciasUrl),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => AsistenciaModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener asistencias: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<AsistenciaModel> registrarAsistencia(
    AsistenciaModel asistencia,
  ) async {
    try {
      final response = await http.post(
        Uri.parse(ApiConfig.asistenciasUrl),
        headers: _headers,
        body: json.encode(asistencia.toJson()),
      );

      if (response.statusCode == 201) {
        return AsistenciaModel.fromJson(json.decode(response.body));
      } else {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al registrar asistencia');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  // ==================== FACULTADES Y ESCUELAS ====================

  Future<List<FacultadModel>> getFacultades() async {
    try {
      final response = await http.get(
        Uri.parse(ApiConfig.facultadesUrl),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => FacultadModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener facultades: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<List<EscuelaModel>> getEscuelas({String? siglasFacultad}) async {
    try {
      String url = ApiConfig.escuelasUrl;
      if (siglasFacultad != null) {
        url += '?siglas_facultad=$siglasFacultad';
      }

      final response = await http.get(Uri.parse(url), headers: _headers);

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => EscuelaModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener escuelas: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  // ==================== VISITAS Y EXTERNOS ====================

  Future<List<VisitaModel>> getVisitas() async {
    try {
      final response = await http.get(
        Uri.parse(ApiConfig.visitasUrl),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => VisitaModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener visitas: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<VisitaModel> registrarVisita(VisitaModel visita) async {
    try {
      final response = await http.post(
        Uri.parse(ApiConfig.visitasUrl),
        headers: _headers,
        body: json.encode(visita.toJson()),
      );

      if (response.statusCode == 201) {
        return VisitaModel.fromJson(json.decode(response.body));
      } else {
        final error = json.decode(response.body);
        throw Exception(error['error'] ?? 'Error al registrar visita');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }

  Future<List<ExternoModel>> getExternos() async {
    try {
      final response = await http.get(
        Uri.parse(ApiConfig.externosUrl),
        headers: _headers,
      );

      if (response.statusCode == 200) {
        List<dynamic> data = json.decode(response.body);
        return data.map((json) => ExternoModel.fromJson(json)).toList();
      } else {
        throw Exception('Error al obtener externos: ${response.statusCode}');
      }
    } catch (e) {
      throw Exception('Error de conexión: $e');
    }
  }
}
