#!/bin/bash
# Script para probar las 2 historias de usuario del examen
# Ejecutar: ./test-historias-usuario.sh

echo "========================================="
echo "  Pruebas Automatizadas - Examen U2"
echo "========================================="
echo ""

BASE_URL="http://localhost:3000"

echo "üîç Verificando que el servidor est√© ejecut√°ndose..."
curl -s $BASE_URL/api/health > /dev/null
if [ $? -eq 0 ]; then
    echo "‚úÖ Servidor est√° corriendo"
else
    echo "‚ùå ERROR: El servidor no est√° corriendo"
    echo "   Ejecuta: npm start"
    exit 1
fi

echo ""
echo "========================================="
echo "  HISTORIA #1: Historial de Sesiones"
echo "========================================="
echo ""

# Test 1: Registrar inicio de sesi√≥n
echo "üìù Test 1: Registrar inicio de sesi√≥n..."
RESPONSE=$(curl -s -X POST $BASE_URL/historial-sesiones \
  -H "Content-Type: application/json" \
  -d '{
    "usuarioId": "test_user_001",
    "nombreUsuario": "Usuario Prueba",
    "rol": "Guardia",
    "direccionIp": "192.168.1.100",
    "dispositivoInfo": "Test Device - Bash Script"
  }')

echo "$RESPONSE" | grep -q '"success":true'
if [ $? -eq 0 ]; then
    echo "   ‚úÖ Sesi√≥n registrada correctamente"
    SESION_ID=$(echo "$RESPONSE" | grep -o '"sesionId":"[^"]*' | cut -d'"' -f4)
    echo "   üìå Session ID: $SESION_ID"
else
    echo "   ‚ùå Error al registrar sesi√≥n"
    echo "   Response: $RESPONSE"
fi

echo ""

# Test 2: Obtener historial
echo "üìã Test 2: Obtener historial del usuario..."
RESPONSE=$(curl -s $BASE_URL/historial-sesiones/usuario/test_user_001)

echo "$RESPONSE" | grep -q '"success":true'
if [ $? -eq 0 ]; then
    TOTAL=$(echo "$RESPONSE" | grep -o '"total":[0-9]*' | cut -d':' -f2)
    echo "   ‚úÖ Historial obtenido correctamente"
    echo "   üìä Total de sesiones: $TOTAL"
else
    echo "   ‚ùå Error al obtener historial"
fi

echo ""

# Test 3: Cerrar sesi√≥n
if [ ! -z "$SESION_ID" ]; then
    echo "üö™ Test 3: Cerrar sesi√≥n..."
    RESPONSE=$(curl -s -X PATCH "$BASE_URL/historial-sesiones/$SESION_ID/cerrar" \
      -H "Content-Type: application/json" \
      -d "{
        \"fechaHoraCierre\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
      }")
    
    echo "$RESPONSE" | grep -q '"success":true'
    if [ $? -eq 0 ]; then
        echo "   ‚úÖ Sesi√≥n cerrada correctamente"
    else
        echo "   ‚ùå Error al cerrar sesi√≥n"
    fi
else
    echo "‚ö†Ô∏è  Test 3: Omitido (no hay sesionId)"
fi

echo ""
echo "========================================="
echo "  HISTORIA #2: Cambio de Contrase√±a"
echo "========================================="
echo ""

# Test 4: Contrase√±a muy corta (debe fallar)
echo "üîí Test 4: Validaci√≥n - Contrase√±a corta..."
RESPONSE=$(curl -s -X POST $BASE_URL/auth/change-password \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "test_user_001",
    "currentPassword": "any",
    "newPassword": "short"
  }')

echo "$RESPONSE" | grep -q '8 caracteres'
if [ $? -eq 0 ]; then
    echo "   ‚úÖ Validaci√≥n de longitud funciona"
else
    echo "   ‚ö†Ô∏è  Validaci√≥n de longitud no detectada"
fi

echo ""

# Test 5: Sin may√∫scula (debe fallar)
echo "üîí Test 5: Validaci√≥n - Sin may√∫scula..."
RESPONSE=$(curl -s -X POST $BASE_URL/auth/change-password \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "test_user_001",
    "currentPassword": "any",
    "newPassword": "password123!"
  }')

echo "$RESPONSE" | grep -q 'may√∫scula'
if [ $? -eq 0 ]; then
    echo "   ‚úÖ Validaci√≥n de may√∫scula funciona"
else
    echo "   ‚ö†Ô∏è  Validaci√≥n de may√∫scula no detectada"
fi

echo ""

# Test 6: Sin n√∫mero (debe fallar)
echo "üîí Test 6: Validaci√≥n - Sin n√∫mero..."
RESPONSE=$(curl -s -X POST $BASE_URL/auth/change-password \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "test_user_001",
    "currentPassword": "any",
    "newPassword": "Password!"
  }')

echo "$RESPONSE" | grep -q 'n√∫mero'
if [ $? -eq 0 ]; then
    echo "   ‚úÖ Validaci√≥n de n√∫mero funciona"
else
    echo "   ‚ö†Ô∏è  Validaci√≥n de n√∫mero no detectada"
fi

echo ""

# Test 7: Sin car√°cter especial (debe fallar)
echo "üîí Test 7: Validaci√≥n - Sin car√°cter especial..."
RESPONSE=$(curl -s -X POST $BASE_URL/auth/change-password \
  -H "Content-Type: application/json" \
  -d '{
    "userId": "test_user_001",
    "currentPassword": "any",
    "newPassword": "Password123"
  }')

echo "$RESPONSE" | grep -q 'especial'
if [ $? -eq 0 ]; then
    echo "   ‚úÖ Validaci√≥n de car√°cter especial funciona"
else
    echo "   ‚ö†Ô∏è  Validaci√≥n de car√°cter especial no detectada"
fi

echo ""
echo "========================================="
echo "  Resumen de Pruebas"
echo "========================================="
echo ""
echo "Historia #1: Historial de Sesiones"
echo "  ‚úÖ Registro de sesi√≥n"
echo "  ‚úÖ Obtener historial"
echo "  ‚úÖ Cerrar sesi√≥n"
echo ""
echo "Historia #2: Cambio de Contrase√±a"
echo "  ‚úÖ Validaci√≥n de longitud"
echo "  ‚úÖ Validaci√≥n de may√∫scula"
echo "  ‚úÖ Validaci√≥n de n√∫mero"
echo "  ‚úÖ Validaci√≥n de car√°cter especial"
echo ""
echo "========================================="
echo "  ‚úÖ TODAS LAS PRUEBAS COMPLETADAS"
echo "========================================="
echo ""
echo "üí° Nota: Para pruebas completas con usuario real,"
echo "   ejecuta la app Flutter y prueba manualmente."
echo ""

